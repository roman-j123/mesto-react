{"ast":null,"code":"class Api {\n  constructor({\n    address,\n    token,\n    groupId\n  }) {\n    this._address = address;\n    this._token = token;\n    this._group = groupId;\n  }\n\n  _checkResponse() {\n    return res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Error: ${res.status}`);\n    };\n  }\n\n  getCards() {\n    return fetch(`${this._address}/v1/${this._group}/cards`, {\n      method: 'GET',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(this._checkResponse());\n  }\n\n  getUser() {\n    return fetch(`${this._address}/v1/${this._group}/users/me`, {\n      method: 'GET',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(this._checkResponse());\n  }\n\n  updateUser(item) {\n    return fetch(`${this._address}/v1/${this._group}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: item.name,\n        about: item.description\n      })\n    }).then(this._checkResponse());\n  }\n\n  addNewCard(name, link) {\n    return fetch(`${this._address}/v1/${this._group}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(this._checkResponse());\n  }\n\n  removeCard(id) {\n    return fetch(`${this._address}/v1/${this._group}/cards/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(this._checkResponse());\n  }\n\n  likeCard(id) {\n    return fetch(`${this._address}/v1/${this._group}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token,\n        'Conetent-Type': 'application/json'\n      }\n    }).then(this._checkResponse());\n  }\n\n  dislikeCard(id) {\n    return fetch(`${this._address}/v1/${this._group}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Conetent-Type': 'application/json'\n      }\n    }).then(this._checkResponse());\n  }\n\n  updateAvatar(item) {\n    return fetch(`${this._address}/v1/${this._group}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: item.avatar\n      })\n    }).then(this._checkResponse());\n  }\n\n}\n\nconst apiConfig = {\n  address: 'https://mesto.nomoreparties.co',\n  token: 'd8d1cc1a-fc60-4366-9dd1-cd8eb0d5a40e',\n  groupId: 'cohort-19'\n};\nconst api = new Api(apiConfig);\nexport default api;","map":{"version":3,"sources":["/Users/romanismagilov/Documents/Учёба/Яндекс.Практикум/mesto-react/src/utils/api.js"],"names":["Api","constructor","address","token","groupId","_address","_token","_group","_checkResponse","res","ok","json","Promise","reject","status","getCards","fetch","method","headers","authorization","then","getUser","updateUser","item","body","JSON","stringify","name","about","description","addNewCard","link","removeCard","id","likeCard","dislikeCard","updateAvatar","avatar","apiConfig","api"],"mappings":"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","sourcesContent":["class Api {\n    constructor({address, token, groupId}) {\n        this._address = address;\n        this._token = token;\n        this._group = groupId;\n    }\n    _checkResponse() {\n        return res => {\n            if(res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Error: ${res.status}`);\n        }\n    }\n    getCards() {\n        return fetch(`${this._address}/v1/${this._group}/cards`, {\n            method: 'GET',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            }\n        }).then(this._checkResponse())\n    }\n    getUser() {\n        return fetch(`${this._address}/v1/${this._group}/users/me`, {\n            method: 'GET',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            }\n        }).then(this._checkResponse())\n    }\n    updateUser(item) {\n        return fetch(`${this._address}/v1/${this._group}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'                \n            },\n            body: JSON.stringify({\n                name: item.name,\n                about: item.description\n            })\n        }).then(this._checkResponse())\n    }\n    addNewCard(name, link) {\n        return fetch(`${this._address}/v1/${this._group}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            }, \n            body: JSON.stringify({\n                name: name,\n                link: link\n            })\n        }).then(this._checkResponse())\n    }\n    removeCard(id) {\n        return fetch(`${this._address}/v1/${this._group}/cards/${id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            }\n        }).then(this._checkResponse())\n    }\n    likeCard(id) {\n        return fetch(`${this._address}/v1/${this._group}/cards/likes/${id}`, {\n            method: 'PUT',\n            headers: {\n                authorization: this._token,\n                'Conetent-Type': 'application/json'\n            }\n        }).then(this._checkResponse())\n    }\n    dislikeCard(id) {\n        return fetch(`${this._address}/v1/${this._group}/cards/likes/${id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n                'Conetent-Type': 'application/json'\n            }\n        }).then(this._checkResponse())\n    }\n    updateAvatar(item) {\n        return fetch(`${this._address}/v1/${this._group}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: item.avatar,\n            })\n        }).then(this._checkResponse())\n    }\n}\nconst apiConfig = {\n    address: 'https://mesto.nomoreparties.co', \n    token: 'd8d1cc1a-fc60-4366-9dd1-cd8eb0d5a40e', \n    groupId: 'cohort-19'\n}\nconst api = new Api(apiConfig);\nexport default api;"]},"metadata":{},"sourceType":"module"}